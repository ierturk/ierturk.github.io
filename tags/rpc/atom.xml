<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
    <title>Mare Nostrum - rpc</title>
    <subtitle>It&#x27;s me!</subtitle>
    <link rel="self" type="application/atom+xml" href="https://erturk.me/tags/rpc/atom.xml"/>
    <link rel="alternate" type="text/html" href="https://erturk.me"/>
    <generator uri="https://www.getzola.org/">Zola</generator>
    <updated>2025-04-05T18:38:00+03:00</updated>
    <id>https://erturk.me/tags/rpc/atom.xml</id>
    <entry xml:lang="en">
        <title>A Fast DDS QML Example with Conan 2 (using conanfile.py)</title>
        <published>2025-04-05T18:38:00+03:00</published>
        <updated>2025-04-05T18:38:00+03:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://erturk.me/projects/fastdds-conan-rpc/"/>
        <id>https://erturk.me/projects/fastdds-conan-rpc/</id>
        
        <content type="html" xml:base="https://erturk.me/projects/fastdds-conan-rpc/">&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;
&lt;p&gt;This project demonstrates how to use Fast DDS with a QML GUI, managed by Conan 2 using a conanfile.py recipe. The example also implements a RPC (remote procedure call) over DDS.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;prerequisites&quot;&gt;Prerequisites&lt;a class=&quot;zola-anchor&quot; href=&quot;#prerequisites&quot; aria-label=&quot;Anchor link for: prerequisites&quot;&gt;
    &lt;svg class=&quot;zola-anchor-link&quot; viewBox=&quot;0 0 16 16&quot; version=&quot;1.1&quot; width=&quot;16&quot; height=&quot;16&quot; aria-hidden=&quot;true&quot;&gt;
        &lt;path fill-rule=&quot;evenodd&quot;
            d=&quot;M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z&quot;&gt;
        &lt;&#x2F;path&gt;
    &lt;&#x2F;svg&gt;
&lt;&#x2F;a&gt;
&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;FastDDSGen V2 tool from eProsima (included in FastDDS installation for Windows) requires Java Runtime Environment (JRE) installation&lt;&#x2F;li&gt;
&lt;li&gt;CMake 3.15+&lt;&#x2F;li&gt;
&lt;li&gt;MSVC C++ compiler supporting C++20&lt;&#x2F;li&gt;
&lt;li&gt;Conan 2.0+&lt;&#x2F;li&gt;
&lt;li&gt;Python 3.6+ (for Conan)&lt;&#x2F;li&gt;
&lt;li&gt;Ninja build&lt;&#x2F;li&gt;
&lt;li&gt;Clink integration with Cmder for enhancing the Windows &lt;code&gt;cmd&lt;&#x2F;code&gt; shell experience&lt;&#x2F;li&gt;
&lt;li&gt;GNU Make&lt;&#x2F;li&gt;
&lt;li&gt;VS Code&lt;&#x2F;li&gt;
&lt;li&gt;A third-party prebuilt 32-bit library, &lt;code&gt;RBIC1Lib&lt;&#x2F;code&gt;, used for enabling communication between the 32-bit proxy side and the 64-bit invoker side.&lt;&#x2F;li&gt;
&lt;li&gt;gTest and gMock for test suite for testing and mocking&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;libraries-from-conan-center&quot;&gt;Libraries from Conan center&lt;a class=&quot;zola-anchor&quot; href=&quot;#libraries-from-conan-center&quot; aria-label=&quot;Anchor link for: libraries-from-conan-center&quot;&gt;
    &lt;svg class=&quot;zola-anchor-link&quot; viewBox=&quot;0 0 16 16&quot; version=&quot;1.1&quot; width=&quot;16&quot; height=&quot;16&quot; aria-hidden=&quot;true&quot;&gt;
        &lt;path fill-rule=&quot;evenodd&quot;
            d=&quot;M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z&quot;&gt;
        &lt;&#x2F;path&gt;
    &lt;&#x2F;svg&gt;
&lt;&#x2F;a&gt;
&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;FastDDS&lt;&#x2F;li&gt;
&lt;li&gt;FastDDS CDR&lt;&#x2F;li&gt;
&lt;li&gt;Boost asio&lt;&#x2F;li&gt;
&lt;li&gt;Boost signals2&lt;&#x2F;li&gt;
&lt;li&gt;Qt 6.5.3 LTS&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;building-on-windows&quot;&gt;Building on Windows&lt;a class=&quot;zola-anchor&quot; href=&quot;#building-on-windows&quot; aria-label=&quot;Anchor link for: building-on-windows&quot;&gt;
    &lt;svg class=&quot;zola-anchor-link&quot; viewBox=&quot;0 0 16 16&quot; version=&quot;1.1&quot; width=&quot;16&quot; height=&quot;16&quot; aria-hidden=&quot;true&quot;&gt;
        &lt;path fill-rule=&quot;evenodd&quot;
            d=&quot;M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z&quot;&gt;
        &lt;&#x2F;path&gt;
    &lt;&#x2F;svg&gt;
&lt;&#x2F;a&gt;
&lt;&#x2F;h2&gt;
&lt;p&gt;Start a &lt;code&gt;Cmder&lt;&#x2F;code&gt; console&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2e3440;color:#d8dee9;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#616e88;&quot;&gt;# For building invoker (64-bit) app
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#616e88;&quot;&gt;# clone the repo
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;λ&lt;&#x2F;span&gt;&lt;span&gt; git clone https:&#x2F;&#x2F;github.com&#x2F;ierturk&#x2F;fastdds-rpc.git
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;λ&lt;&#x2F;span&gt;&lt;span&gt; cd fastdds-rpc
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#616e88;&quot;&gt;#
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;λ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;C:\Program Files (x86)\Microsoft Visual Studio\2022\BuildTools\VC\Auxiliary\Build\vcvarsall.bat&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt; x64
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#616e88;&quot;&gt;# Note: Adjust the path to match your Visual Studio installation if it differs.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;λ&lt;&#x2F;span&gt;&lt;span&gt; make all
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;λ&lt;&#x2F;span&gt;&lt;span&gt; code .
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#616e88;&quot;&gt;# ctrl+shift+p
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#616e88;&quot;&gt;# CMake: Select Configure Preset
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#616e88;&quot;&gt;# select conan-windows-msvc-194-x86_64-debug config
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#616e88;&quot;&gt;# For building proxy (32-bit) app
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;λ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;C:\Program Files (x86)\Microsoft Visual Studio\2022\BuildTools\VC\Auxiliary\Build\vcvarsall.bat&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt; x86
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#616e88;&quot;&gt;# Note: Modify the path above if your Visual Studio installation is in a different location.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;λ&lt;&#x2F;span&gt;&lt;span&gt; make all
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;λ&lt;&#x2F;span&gt;&lt;span&gt; code .
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#616e88;&quot;&gt;# ctrl+shift+p
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#616e88;&quot;&gt;# CMake: Select Configure Preset
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#616e88;&quot;&gt;# select conan-windows-msvc-194-x86-debug config
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;All tests will be built for x64; no tests will be built for the x86 build. VS Code tests can be used, or in the console, run under the build directory: &lt;code&gt;build\windows-msvc-194-x86_64-debug&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2e3440;color:#d8dee9;&quot;&gt;&lt;code&gt;&lt;span&gt;λ ctest --verbose
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>A sample project that uses slint-ui, dust_dds and third party dll C&#x2F;C++ library usage on windows with Rust</title>
        <published>2025-03-20T19:47:00+03:00</published>
        <updated>2025-03-20T19:47:00+03:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://erturk.me/projects/zsc31050-calib-rust/"/>
        <id>https://erturk.me/projects/zsc31050-calib-rust/</id>
        
        <content type="html" xml:base="https://erturk.me/projects/zsc31050-calib-rust/">&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;
&lt;p&gt;The aim of the project is to develop a comprehensive system that runs on Windows 11 and is capable of communicating with remote systems using topics, such as in ROS2, instead of IP addresses.&lt;&#x2F;p&gt;
&lt;p&gt;There is a specific requirement for this project: we have a 32-bit legacy DLL, and our application should be 64-bit. In this case at least we need to develop two modules, one of them 32-bit and the other one is 64-bit. Consequently, we have to employ an IPC to exchange data between modules. There are lots of possibility such as gRPC but we don’t want to use IP addresses but topics. Even though it is not a best practice, this project will be a learning by doing project. Our main aim is discovering possibilities.&lt;&#x2F;p&gt;
&lt;p&gt;So let’s start!&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h3 id=&quot;the-tools-that-used-within-this-project&quot;&gt;The Tools that Used within this Project&lt;a class=&quot;zola-anchor&quot; href=&quot;#the-tools-that-used-within-this-project&quot; aria-label=&quot;Anchor link for: the-tools-that-used-within-this-project&quot;&gt;
    &lt;svg class=&quot;zola-anchor-link&quot; viewBox=&quot;0 0 16 16&quot; version=&quot;1.1&quot; width=&quot;16&quot; height=&quot;16&quot; aria-hidden=&quot;true&quot;&gt;
        &lt;path fill-rule=&quot;evenodd&quot;
            d=&quot;M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z&quot;&gt;
        &lt;&#x2F;path&gt;
    &lt;&#x2F;svg&gt;
&lt;&#x2F;a&gt;
&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;Rust Toolchain with installed i686 and x86_64 target&lt;&#x2F;li&gt;
&lt;li&gt;MSVC compilers&lt;&#x2F;li&gt;
&lt;li&gt;DLLs from Renesas&lt;&#x2F;li&gt;
&lt;li&gt;VS Code and Rust Analyzer plugin&lt;&#x2F;li&gt;
&lt;li&gt;Git for Windows&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;hr &#x2F;&gt;
&lt;h3 id=&quot;setup&quot;&gt;Setup&lt;a class=&quot;zola-anchor&quot; href=&quot;#setup&quot; aria-label=&quot;Anchor link for: setup&quot;&gt;
    &lt;svg class=&quot;zola-anchor-link&quot; viewBox=&quot;0 0 16 16&quot; version=&quot;1.1&quot; width=&quot;16&quot; height=&quot;16&quot; aria-hidden=&quot;true&quot;&gt;
        &lt;path fill-rule=&quot;evenodd&quot;
            d=&quot;M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z&quot;&gt;
        &lt;&#x2F;path&gt;
    &lt;&#x2F;svg&gt;
&lt;&#x2F;a&gt;
&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;Install Rustup&lt;&#x2F;li&gt;
&lt;li&gt;Install MSVC compilers by using MSVC build tools with C&#x2F;C++ workload&lt;&#x2F;li&gt;
&lt;li&gt;the Optionally Make for Windows if you would like to build and run project by GNU Make&lt;&#x2F;li&gt;
&lt;li&gt;Rest of process is clone project and run with your favorite tool… cargo, make or VS Code (settins included, see .vscode folder)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre style=&quot;background-color:#2e3440;color:#d8dee9;&quot;&gt;&lt;code&gt;&lt;span&gt;### installing required rust toolchains
&lt;&#x2F;span&gt;&lt;span&gt;PS&amp;gt; rustup toolchain install stable-x86_64-pc-windows-msvc
&lt;&#x2F;span&gt;&lt;span&gt;PS&amp;gt; rustup toolchain install stable-i686-pc-windows-msvc
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;hr &#x2F;&gt;
&lt;h3 id=&quot;running-and-debugging&quot;&gt;Running and Debugging&lt;a class=&quot;zola-anchor&quot; href=&quot;#running-and-debugging&quot; aria-label=&quot;Anchor link for: running-and-debugging&quot;&gt;
    &lt;svg class=&quot;zola-anchor-link&quot; viewBox=&quot;0 0 16 16&quot; version=&quot;1.1&quot; width=&quot;16&quot; height=&quot;16&quot; aria-hidden=&quot;true&quot;&gt;
        &lt;path fill-rule=&quot;evenodd&quot;
            d=&quot;M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z&quot;&gt;
        &lt;&#x2F;path&gt;
    &lt;&#x2F;svg&gt;
&lt;&#x2F;a&gt;
&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;Type just following commands in your favourite terminal app&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre style=&quot;background-color:#2e3440;color:#d8dee9;&quot;&gt;&lt;code&gt;&lt;span&gt;PS&amp;gt; git clone https:&#x2F;&#x2F;github.com&#x2F;ierturk&#x2F;zsc31050-calib-rust.git
&lt;&#x2F;span&gt;&lt;span&gt;PS&amp;gt; cd zsc31050-calib-rust
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;## those commands need to be run on splitted terminals
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;## if you prefer GNU Make and you have one on Windows
&lt;&#x2F;span&gt;&lt;span&gt;PS&amp;gt; make run-server
&lt;&#x2F;span&gt;&lt;span&gt;PS&amp;gt; make run-gui
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;## if you prefer cargo
&lt;&#x2F;span&gt;&lt;span&gt;PS&amp;gt; cargo build --target i686-pc-windows-msvc --no-default-features -p rbic1_dll_svc --example server
&lt;&#x2F;span&gt;&lt;span&gt;PS&amp;gt; cargo build --target x86_64-pc-windows-msvc -p test_gui
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;If you prefer using VS Code to run tasks:&lt;br &#x2F;&gt;
Use ctrl-shift P then Tasks: Run task and select one&lt;&#x2F;p&gt;
&lt;p&gt;If everything is fine, you will obtain results similar to those depicted in the header image.&lt;&#x2F;p&gt;
</content>
        
    </entry>
</feed>
